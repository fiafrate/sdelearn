Metadata-Version: 2.1
Name: sdelearn
Version: 0.1.0
Summary: SDElearn: a Python framework for Stochastic Differential Equations modeling
Home-page: https://github.com/fiafrate/sdelearn
Author: Francesco Iafrate
Author-email: francesco.iafrate@uniroma1.it
License: MIT
Description: 
        # `SDElearn`: a Python pkg for SDEs
        
        This package implements functionalities for working with Stochastic Differential Equations models (SDEs for short).
        It includes simulation routines as well as estimation methods based on observed time series. 
        
        Conceptually the information required to describe an SDEs can be divided in three groups: _model_, _sampling_ and _data_.
        The `sdelearn` class is the main class of this package, dedicated to the interaction with the user. 
        
        ## How to create a `sdelearn` class?
        A `sdelearn` class is based on three dedicated subclasses, `SdeModel`, `SdeSampling` and `SdeData`, 
        containing information about the model, the sampling structure and the observed data respectively. First these three classes 
        must be created:
        
        * `SdeModel`: contains information about the Sde model, in particular the "actual" Sde formula. It is assumed to be a parametric 
          model, i.e. the functional form of the model is known up to some parameters.
        In order to construct this class user is required to 
        supply two functions, a drift function (`drift`) and a diffusion function (`diff`); an array-like object  `mod_shape` containing the 
        dimensions of the model of the form [`n_var`, `n_noise`], where the first dimension represents the number of variables 
        and the second the number of Gaussian noises; a dictionary `par_names` with keys `"drift"` and `"diffusion"` and with values 
        given by character lists containing all the parameter names appearing in the corresponding drift and diffusion function, 
        e.g. `par_names = {"drift": ["par_dr1, "par_dr2"...], "diffusion: ["par_di1, "par_dr2"...] "`(this argument is optional 
        and parameter names can be set later using the function `set_param`); a character list `var_names` containing variable names, 
        if missing automatically set to `X0`, `X1` ... `X[n_var]`. 
        
          The `mode` argument controls the way the model is specified. There are two ways to supply the drift and diffusion components of the model: "symbolic" or "functional" mode. 
        
          **_Symbolic mode_**. In symbolic mode (`mode = 'sym'`, the default) the drift and diffusion are supplied as lists of `sympy` expressions, 
        where all the non-constant values, i.e. parameters and state variables, are expressed as `sympy` symbols. All the mathematical
        functions used in the expressions have to be imported from `sympy`, e.g. use `sympy.sqrt` instead of `math.sqrt`. The length of the `drift`
        list has to match number of variables in the model `n_var`. Similarly the `diff` argument has to be a matrix-like object or nested
        list with length `n_var` and the length of `diff[0]` is `n_noise`.
        
          **_Function mode_**.
          This is be specified by `mode='fun'`. The **drift function** must be a vector valued function, taking as input two arguments: the state value and the parameters. 
          The input state should be a numeric vector or list, 
          the parameters should be a dictionary. The value returned by this function must match the number of variables `n_var` in the model. 
          Similarly, the **diffusion function** of the model must be supplied as a matrix valued function,
          which takes as input the current state and a dictionary containing the parameters. The dimensions of the output value of the diffusion
          function must match the number of variables and noises supplied: i.e. it must be a `n_var`x`n_noise` matrix.
          Drift and diffusion functions can be scalar valued. 
          The parameters must be addressed by name 
          in both these functions, i.e. as keys in a dictionary. 
          Note that names are important here: names used in the drift and diffusion function definitions must be consistent with
          those supplied as initial values for estimation or simulation (`simulate`). See the examples for details. As a rule of thumb
          the models should be supplied as you'd write them with "pen and paper";
          
        * `SdeSampling`: it contains information about the temporal sampling of the data. It is constructed by supplying the
        time of the initial observation `initial` (typically `initial=0`), the last observed time `terminal` and the one between `delta`, the time span between each pair 
          of observations (assumed constant), or `n` the number of points in the grid (including endpoints). If `delta` is given 
        the terminal value might not be matched exactly and will be replaced by the largest value in the grid <= terminal. A time grid corresponding to the observation time is automatically generated;
          
        * `SdeData`: it contains empirically observed or simulated data. It should be a data frame where each row corresponds to an observation of the time series.
        The observation times should match the time grid supplied in the sampling information: that is the number of rows in `SdeData.data`
          should be equal to the length of the grid `SDEsampling.grid`.
          
        Finally, an instance of `sdelearn` can be created as `Sde(model = SdeModel, sampling=SdeSampling, data=SdeData)`
        where the value of each of the three arguments is an instance of the previous classes. The data argument
        is optional. Data can be added later e.g. by simulation or by using the setData `function`. 
        
        
        ## Learning model parameters using a `SdeLearner`
        
        The parameters of a SDE can be estimated using an object of class
        `SdeLearner`. Currently available learners are Qmle and Adalasso.
        
        
          
        ## Technical details
        
        This section contains some information about the internal structure of the package
        (if you are getting unexpected errors this is a good place to start).
        
        * `param`: when in `mode='fun'`, typical name for parameter argument of drift and diffusion function. Both functions share the same 
        parameter dictionary, and the full parameter dictionary will be passed to both functions. Parameter names
        used inside the function will make the difference. Initially, if the `par_names` argument is left blank, the `model` is not aware of what the parameters 
        of the models are. They will be inferred when simulation takes place without distinction between drift and diffusion parameters.
        When the `simulate` method 
        or an estimation method is called the user will have to supply a `truep` parameter or a starting parameter for 
        the optimization which will act as a _template_ for the parameter space of the model.
        Before any estimation takes place the parameter names should be explicitly set.
        
        * the `SdeLearner` class is generic ("abstract") and the user should never
        directly use it but instead they should use one of the subclasses implementing 
        specific methods.
        
        * in numerical computation the dictionary of parameters is converted
        to arrays. This arrays must match the order of the parameters in the model.
        which is drift first then diffusion, in lexicographic order.
        Fit and loss functions should automatically match the supplied values
        with the order specified in the model: currently automatic reordering is done for
        arguments `param` of the loss function, `start` and `bounds` in model fitting. Note that bounds
        do not have names, so they are assumed to have the same order as `start`.
        The ordered list of parameters can be
        accessed by `Sde.model.param`.
        
        ## Examples
        
        A multivariate model.
        
        **Functional mode**. This is the direct way to approach Sde modeling with `sdelearn`.
        Define the drift function:
        
        
            def b(x, param):
                out = [0,0]
                out[0]= param["theta.dr00"] - param["theta.dr01"] * x[0]
                out[1] = param["theta.dr10"] - param["theta.dr11"] * x[1]
                return out
        
        
        Define the diffusion function:
        
        
            def A(x, param):
                out = [[0,0],[0,0]]
                out[0][0] = param["theta.di00"] + param["theta.di01"] * x[0]
                out[1][1] = param["theta.di10"] + param["theta.di11"] * x[0]
                out[1][0] = 0
                out[0][1] = 0
                return out
        
        
        Create the Sde object
        
        
            sde = Sde(sampling=SdeSampling(initial=0, terminal=1, delta=0.01),
                              model=SdeModel(b, A, mod_shape=[2,2],
                                               par_names={"drift": ["theta.dr00", "theta.dr01", "theta.dr10", "theta.dr11"],
                                                          "diffusion": ["theta.di00", "theta.di01", "theta.di10", "theta.di11"]}
                                               )
                              )
        
        
        Set the true value of the parameter and simulate a sample path of the process:
        
        
            truep = {"theta.dr00": 0, "theta.dr01": -0.5, "theta.dr10": 0, "theta.dr11": -0.5, "theta.di00": 0, "theta.di01": 1, "theta.di10": 0, "theta.di11": 1}
            sde.simulate(truep=truep, x0=[1, 2])
        
        
        Plot the simulated path:
        
        
            sde.plot()
        
        **Symbolic mode**.
Keywords: stochastic,differential,equations,statistical learning,inference
Platform: UNKNOWN
Classifier: Development Status :: 3 - Alpha
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Description-Content-Type: text/markdown
